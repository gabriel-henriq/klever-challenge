// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/upvote/v1/upvote.proto

package upvotev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteServiceClient is the client API for UpvoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteServiceClient interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	Upvote(ctx context.Context, in *UpvoteRequest, opts ...grpc.CallOption) (*UpvoteResponse, error)
	WatchBook(ctx context.Context, in *WatchBookRequest, opts ...grpc.CallOption) (UpvoteService_WatchBookClient, error)
}

type upvoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteServiceClient(cc grpc.ClientConnInterface) UpvoteServiceClient {
	return &upvoteServiceClient{cc}
}

func (c *upvoteServiceClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, "/upvote.v1.UpvoteService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) Upvote(ctx context.Context, in *UpvoteRequest, opts ...grpc.CallOption) (*UpvoteResponse, error) {
	out := new(UpvoteResponse)
	err := c.cc.Invoke(ctx, "/upvote.v1.UpvoteService/Upvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) WatchBook(ctx context.Context, in *WatchBookRequest, opts ...grpc.CallOption) (UpvoteService_WatchBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpvoteService_ServiceDesc.Streams[0], "/upvote.v1.UpvoteService/WatchBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteServiceWatchBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpvoteService_WatchBookClient interface {
	Recv() (*WatchBookResponse, error)
	grpc.ClientStream
}

type upvoteServiceWatchBookClient struct {
	grpc.ClientStream
}

func (x *upvoteServiceWatchBookClient) Recv() (*WatchBookResponse, error) {
	m := new(WatchBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpvoteServiceServer is the server API for UpvoteService service.
// All implementations should embed UnimplementedUpvoteServiceServer
// for forward compatibility
type UpvoteServiceServer interface {
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	Upvote(context.Context, *UpvoteRequest) (*UpvoteResponse, error)
	WatchBook(*WatchBookRequest, UpvoteService_WatchBookServer) error
}

// UnimplementedUpvoteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUpvoteServiceServer struct {
}

func (UnimplementedUpvoteServiceServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedUpvoteServiceServer) Upvote(context.Context, *UpvoteRequest) (*UpvoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (UnimplementedUpvoteServiceServer) WatchBook(*WatchBookRequest, UpvoteService_WatchBookServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBook not implemented")
}

// UnsafeUpvoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServiceServer will
// result in compilation errors.
type UnsafeUpvoteServiceServer interface {
	mustEmbedUnimplementedUpvoteServiceServer()
}

func RegisterUpvoteServiceServer(s grpc.ServiceRegistrar, srv UpvoteServiceServer) {
	s.RegisterService(&UpvoteService_ServiceDesc, srv)
}

func _UpvoteService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upvote.v1.UpvoteService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_Upvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).Upvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upvote.v1.UpvoteService/Upvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).Upvote(ctx, req.(*UpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_WatchBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpvoteServiceServer).WatchBook(m, &upvoteServiceWatchBookServer{stream})
}

type UpvoteService_WatchBookServer interface {
	Send(*WatchBookResponse) error
	grpc.ServerStream
}

type upvoteServiceWatchBookServer struct {
	grpc.ServerStream
}

func (x *upvoteServiceWatchBookServer) Send(m *WatchBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UpvoteService_ServiceDesc is the grpc.ServiceDesc for UpvoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upvote.v1.UpvoteService",
	HandlerType: (*UpvoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _UpvoteService_CreateBook_Handler,
		},
		{
			MethodName: "Upvote",
			Handler:    _UpvoteService_Upvote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBook",
			Handler:       _UpvoteService_WatchBook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/upvote/v1/upvote.proto",
}
